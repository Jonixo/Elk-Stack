version: '3.2'

services:
  elasticsearch:
    build:
      context: elasticsearch/
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ELASTIC_PASSWORD: changeme
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: logstash/
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - elk

  kafka:
      image: wurstmeister/kafka:latest
      ports:
        - target: 9094
          published: 9094
          protocol: tcp
          mode: host
      environment:
        HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
        KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
        KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      networks:
        - elk

  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - elk

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    expose:
      - 15672
    tty:
      true
    restart:
      unless-stopped
    networks:
      - elk

  mqtt:
    image: toke/mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    tty:
      true
    restart:
      unless-stopped
    expose:
      - 9001
    networks:
      - elk

  portainer:
    image: portainer/portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - 9000:9000
      - 8000:8000
    expose:
      - 9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - elk


networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
  portainer_data:
  mongodb_data_container: